/*
Почти «Майнкрафт» (дополнительное задание)
Нам предстоит сделать некое подобие «Майнкрафта». Миллионов не обещаю, но это интересная 
задача на пространственное мышление. У нас есть небольшой квадратный ландшафт, размером 5 × 5 
секторов. В каждом секторе располагается блок (столбик) ландшафта, максимальная высота 
которого — 10 блоков. Текущая высота каждого такого блока задаётся пользователем в начале 
программы. Итоговая задача: используя трёхмерный массив, вывести в стандартный вывод 
горизонтальное сечение (или горизонтальный срез) нашего небольшого мира. Сам мир как раз 
должен быть представлен в виде трёхмерного массива. Его горизонтальный срез — это двумерный 
массив, который надо отобразить в виде единиц и нулей. 0 — это отсутствие элемента на данном 
уровне в данной точке, 1 — элемент есть. Уровень среза от 0 до 9 включительно также задаётся в 
стандартном вводе.
Пример выполнения
input matrix of heights:
  5 5 5 5
  4 4 4 4
  3 2 2 3
  1 1 1 1
input slice: 4
  1 1 1 1
  1 1 1 1
  0 0 0 0
  0 0 0 0
input slice: 3
  1 1 1 1
  1 1 1 1
  1 0 0 1
  0 0 0 0

Пояснение к примеру
Что оценивается
Использован трёхмерный массив.
Пользователь задаёт срез ландшафта, который хочет увидеть (от 0 до 9).
Выводится срез размером 5 × 5, состоящий из 0 и 1.
Советы и рекомендации
При печати потребуется проверять содержимое трёхмерного массива. При уже известном значении 
уровня level проверка выглядит так:
if (world[i][j][level]) 
{ 
//печатаем 1 
} 
else 
{ 
//печатаем 0 
}
*/

#include <iostream>
using namespace std;
void landscape_init(bool landscape [][5][10]){
    for (int i = 0; i < 5; i++){
        for (int j = 0; j < 5; j++){
            for(int k = 0; k < 10; k++){
                landscape[i][j][k] = false;
            }
        }
    }
}
void landscape_heights (bool landscape [][5][10]){
    cout << "Input matrix of heights: \n";
    int tmp = 0;
    int height;
    while (tmp < 25){        
        for (int i = 0; i < 5; i++) {
            for (int j = 0; j < 5; j++){
                cin >> height;
                for (int k = 0; k < height; k++){
                    landscape[i][j][k] = true;
                    
                }
                tmp++;
            }
        }
    }
}
void get_slice (bool landscape[][5][10], int slice){
    for (int i = 0; i < 5; i++){
        for (int j = 0; j < 5; j++){
            cout << landscape[i][j][slice - 1] << " ";
        }
        cout << endl;
    }
}
main() {
  cout << "----------------\n";
  cout << "Almost Minecraft\n";
  cout << "----------------\n";
  bool landscape[5][5][10];
  landscape_init(landscape);
  landscape_heights(landscape);
  int slice;
  cout << "Input slice: ";
  cin >> slice;
  get_slice(landscape, slice);
  return 0; 
}